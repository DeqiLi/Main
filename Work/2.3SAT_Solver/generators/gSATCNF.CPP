/*
	This program is to generate a random 3SAT instance with n variables and m clauses.
	The generated 3SAT instance has at least one solution.
	Coded by Deqi Li, Jan 25,2012
  */
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <math.h>
#include <time.h>
#define maxN    1000000
#define maxM 20000000

int solution[maxN]; 
int clauses[maxM][3];

/*
  * min, mid, max is a sorted new clause to be checked
  * m1 is the current number of clauses
  * Note: each clause in clauses[][] is sorted
  */
bool isRepeatedClause(int min, int mid, int max, int m1){ 
	int i;
	for(i=0; i<m1; i++) {
		if(clauses[i][0] == min && clauses[i][1] == mid && clauses[i][2] == max) break;
	}
	if(i==m1) return false;
	else return true;
}

/*
  * Check if the generated clause conform with the given solution
  */ 
bool solution_check(int n, int m, int i){
	if((clauses[i][0]>0 && solution[clauses[i][0]]==0  || clauses[i][0]<0 && solution[0-clauses[i][0]]==1)  &&
		(clauses[i][1]>0 && solution[clauses[i][1]]==0  || clauses[i][1]<0 && solution[0-clauses[i][1]]==1)  &&
		(clauses[i][2]>0 && solution[clauses[i][2]]==0  || clauses[i][2]<0 && solution[0-clauses[i][2]]==1))
		return true; // passed check
	return false;	 
}

/*
  * Generate a random 3SAT formula that has solutions and is in CNF format.
  */
int main(int argc, char *argv[]){
	int n,m,i;
	int var1,var2,var3;
	int min, mid, max;

	if(argc>2) { 
		n=atoi(argv[1]); 
		m=atoi(argv[2]); 
	}
	else{
		printf("Usage: gSATCNF n m\n");
		exit(0);
		//n=100;
		//m=430;
	}

	if(n > maxN || m > maxM) {
		printf("This generator only supports n<=%d, m<=%d\n", maxN, maxM);
		exit(0);
	}

	srand((unsigned int)time(0));
	
	for(i = 1; i <= n; i++){
		solution[i] = rand() % 2;
	}

	printf("c This Formular is generated by Deqi_SAT_CNF\n"); // for CNF format
	printf("c\n");
	printf("c    horn? no \n");
	printf("c    forced? no \n");
	printf("c    mixed sat? no \n");
	printf("c    clause length = 3 \n");
	if(n>20){
		printf("c    a sample solution(only show the first 20 vars): ");
		for(i=1; i<=20; i++) printf("%d", solution[i]);
	}
	else{
		printf("c    a sample solution: ");
		for(i=1; i<=n; i++) printf("%d", solution[i]);
	}
	printf("\n");
	printf("c\n");
	printf("p cnf %d  %d \n", n, m);  

	int sign1, sign2, sign3;
	for(i=0; i<m; i++) {
		var1=0; var2=0; var3=0;
		min = 0x7FFFFFFF;		
		max=0;
		mid=0;

		do{
			do{
				var1=rand()% (n + 1);
			}while(var1==0);

			do{
				var2=rand()% (n + 1);
			}while(var2==0 || var2 == var1);

			do{
				var3=rand()% (n + 1);
			}while(var3==0 || var3 == var1  || var3 == var2); // guarantee no repeated literals in a clause
						
			// sort var1, var2, var3:
			if(min>var1) min=var1; if(min>var2) min=var2; if(min>var3) min=var3;
			if(max<var1) max=var1; if(max<var2) max=var2; if(max<var3) max=var3;
			if(var1!=min && var1!=max) mid=var1;
			else if(var2!=min && var2!=max) mid=var2;
			else if(var3!=min && var3!=max) mid=var3;
			
			//var1 = min; var2=mid; var3=max; // set var1, var2, var3 to be abs of min,mid,max
			sign1 = rand()%2, sign2=rand()%2, sign3=rand()%2;  //  AB~C --> signs: 0 0 1
			if(sign1) min = 0-min;
			if(sign2) mid = 0-mid;
			if(sign3) max = 0-max;

			if(isRepeatedClause(min, mid, max, i))  continue; // gurantee no repeated clauses in the formula; not quite necessary and run-time costly
			
			clauses[i][0]=min; 
			clauses[i][1]=mid; 
			clauses[i][2]=max; 
		}while(!solution_check(n,m,i));  
		
		printf(" %5d %5d %5d   0\n", min, mid, max); // the new clause looks like:    -12   340  -576  // for CNF format
	}

	for(i=0; i<m; i++) {
		if(!solution_check(n,m,i)) {
			printf("%%\n0\nNot passed solution check!!\n");
			return -1;
		}
	}
	printf("%%\n0\n\n");  // for CNF format

	return 0;
}

